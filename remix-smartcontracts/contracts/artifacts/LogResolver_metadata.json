{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IEAS",
						"name": "eas",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AccessDenied",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InsufficientValue",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidEAS",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidLength",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotPayable",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Attested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Revoked",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "_userId",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "_equipmentId",
						"type": "uint64"
					},
					{
						"internalType": "uint32",
						"name": "_activationDays",
						"type": "uint32"
					}
				],
				"name": "addEntry",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "schema",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "time",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "expirationTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "revocationTime",
								"type": "uint64"
							},
							{
								"internalType": "bytes32",
								"name": "refUID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "attester",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "revocable",
								"type": "bool"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct Attestation",
						"name": "attestation",
						"type": "tuple"
					}
				],
				"name": "attest",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "attestationsArray",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "userId",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "equipmentId",
						"type": "uint64"
					},
					{
						"internalType": "uint32",
						"name": "activationDays",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isPayable",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "schema",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "time",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "expirationTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "revocationTime",
								"type": "uint64"
							},
							{
								"internalType": "bytes32",
								"name": "refUID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "attester",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "revocable",
								"type": "bool"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct Attestation[]",
						"name": "attestations",
						"type": "tuple[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					}
				],
				"name": "multiAttest",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "schema",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "time",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "expirationTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "revocationTime",
								"type": "uint64"
							},
							{
								"internalType": "bytes32",
								"name": "refUID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "attester",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "revocable",
								"type": "bool"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct Attestation[]",
						"name": "attestations",
						"type": "tuple[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					}
				],
				"name": "multiRevoke",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "schema",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "time",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "expirationTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "revocationTime",
								"type": "uint64"
							},
							{
								"internalType": "bytes32",
								"name": "refUID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "attester",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "revocable",
								"type": "bool"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct Attestation",
						"name": "attestation",
						"type": "tuple"
					}
				],
				"name": "revoke",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "version",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"events": {
				"Attested(uint256)": {
					"params": {
						"value": "The attested value."
					}
				},
				"Revoked(uint256)": {
					"params": {
						"value": "The attested value."
					}
				}
			},
			"kind": "dev",
			"methods": {
				"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
					"params": {
						"attestation": "The new attestation."
					},
					"returns": {
						"_0": "Whether the attestation is valid."
					}
				},
				"isPayable()": {
					"returns": {
						"_0": "Whether the resolver supports ETH transfers."
					}
				},
				"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
					"params": {
						"attestations": "The new attestations.",
						"values": "Explicit ETH amounts which were sent with each attestation."
					},
					"returns": {
						"_0": "Whether all the attestations are valid."
					}
				},
				"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
					"params": {
						"attestations": "The existing attestations to be revoked.",
						"values": "Explicit ETH amounts which were sent with each revocation."
					},
					"returns": {
						"_0": "Whether the attestations can be revoked."
					}
				},
				"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
					"params": {
						"attestation": "The existing attestation to be revoked."
					},
					"returns": {
						"_0": "Whether the attestation can be revoked."
					}
				},
				"version()": {
					"returns": {
						"_0": "Semver contract version as a string."
					}
				}
			},
			"title": "LogResolver",
			"version": 1
		},
		"userdoc": {
			"events": {
				"Attested(uint256)": {
					"notice": "Emitted to log a uint256 value."
				},
				"Revoked(uint256)": {
					"notice": "Emitted to log a uint256 value."
				}
			},
			"kind": "user",
			"methods": {
				"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
					"notice": "Processes an attestation and verifies whether it's valid."
				},
				"constructor": {
					"notice": "Creates a new LogResolver instance."
				},
				"isPayable()": {
					"notice": "Checks if the resolver can be sent ETH."
				},
				"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
					"notice": "Processes multiple attestations and verifies whether they are valid."
				},
				"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
					"notice": "Processes revocation of multiple attestation and verifies they can be revoked."
				},
				"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
					"notice": "Processes an attestation revocation and verifies if it can be revoked."
				},
				"version()": {
					"notice": "Returns the full semver contract version."
				}
			},
			"notice": "A sample schema resolver that logs a uint256 input.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/resolver.sol": "LogResolver"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@ethereum-attestation-service/eas-contracts/contracts/Common.sol": {
			"keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
			"license": "MIT",
			"urls": [
				"bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
				"dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
			]
		},
		"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol": {
			"keccak256": "0x242e0203b314c8539fd4ad3c1f0b7a9c1178fe55b223f4bc007eb9cbf271854c",
			"license": "MIT",
			"urls": [
				"bzz-raw://a3888dc93e93f9f467680f9017bed54a7a4f3b7135cf76a3cbebe96fc263a8c1",
				"dweb:/ipfs/QmSYaJ6oGNw2CocKWSoQnqrpMnD8ag9Gv5hS3U7xnr4Nuv"
			]
		},
		"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol": {
			"keccak256": "0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754",
			"license": "MIT",
			"urls": [
				"bzz-raw://d453a929ef64a69cd31195ec2ee5ed1193bfa29f633e13c960e92154c37ad158",
				"dweb:/ipfs/QmXs1Z3njbHs2EMgHonrZDfcwdog4kozHY5tYNrhZK5yqz"
			]
		},
		"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol": {
			"keccak256": "0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18",
			"license": "MIT",
			"urls": [
				"bzz-raw://3dd543fa0e33cef1ea757627f9c2a10a66ee1ce17aa9087f437c5b53a903c7f0",
				"dweb:/ipfs/QmXsy6UsGBzF9zPCCjmiwPpCcX3tHqU13TmR67B69tKnR6"
			]
		},
		"@ethereum-attestation-service/eas-contracts/contracts/Semver.sol": {
			"keccak256": "0xb26a2b03bed18631e2195fa6331167604fdc2672563c4daf87209d07fa1aaaba",
			"license": "MIT",
			"urls": [
				"bzz-raw://29c0cd781ce966a19de32c31c72192333b4319539ef169afc168e585a492fbae",
				"dweb:/ipfs/QmTUK1ZUn6cBF7zXB5oT9vUMQ1Sbz9J7ZU91RZJEwsmqX4"
			]
		},
		"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
			"keccak256": "0x479f39f03425df5385d790cd2c7447b8250aeb9733d13029d3da8c5982b6604b",
			"license": "MIT",
			"urls": [
				"bzz-raw://c378654832e0e564f1ef502977253c243712501379ac6233caac05979713ba80",
				"dweb:/ipfs/QmbKdSGgniy45K2vEH93BJtJYo1syp3FL8JCMEUtZELpjx"
			]
		},
		"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol": {
			"keccak256": "0x0c0533594956d3a7d861a68127825cbde3bc9a89979ece3aa99c3820f4c5a251",
			"license": "MIT",
			"urls": [
				"bzz-raw://487e5c67f3d347f6f99b0857155aebbb015f63666ab46c57dffc72a7c6f5c06f",
				"dweb:/ipfs/QmeTmXPtumpWVxGY2NXQG3Fma73vh3Bjb6diuUHK52mpPD"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792",
			"license": "MIT",
			"urls": [
				"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453",
				"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875",
				"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72",
			"license": "MIT",
			"urls": [
				"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc",
				"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT"
			]
		},
		"contracts/resolver.sol": {
			"keccak256": "0x2e58b20ad19b09caa1bbd19b4c1dd3f7f29607ed5350de9967cb7e14e1597831",
			"license": "MIT",
			"urls": [
				"bzz-raw://58600be7b571989f3ada8d7d89bc4370a3c97cd211ece279bfc50d77fde1c850",
				"dweb:/ipfs/QmaEH9y6JsDeJUqWcp9bXUcgui3kTk4xzVfSE1Zstd4ibE"
			]
		}
	},
	"version": 1
}